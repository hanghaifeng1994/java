<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task    http://www.springframework.org/schema/task/spring-task-3.0.xsd
       ">
	<task:annotation-driven />
	<!--&lt;!&ndash;//定时统计互动数据&ndash;&gt;
	<bean id="testJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		&lt;!&ndash; durability 表示任务完成之后是否依然保留到数据库，默认false &ndash;&gt;
		<property name="durability" value="true" />
		<property name="requestsRecovery" value="true" />
		<property name="jobClass">
			<value>
				com.learnyeai.quartz.DetailQuartzJobBean
			</value>
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="targetObject" value="auditListener" />
				<entry key="targetMethod" value="updateAuditStatus" />
				&lt;!&ndash; 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 &ndash;&gt;
				&lt;!&ndash;
                可以在job类上注解实现，并发，jobdata持久化
                @PersistJobDataAfterExecution
                @DisallowConcurrentExecution
                &ndash;&gt;
				<entry key="concurrent" value="false" />
			</map>
		</property>
	</bean>

	<bean id="testJobTrigger"
		  class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="testJobDetail" />
		</property>
		<property name="cronExpression">
			<value>0/10 * * * * ?</value>&lt;!&ndash;每10秒钟执行一次 &ndash;&gt;
		</property>
	</bean>-->
</beans>