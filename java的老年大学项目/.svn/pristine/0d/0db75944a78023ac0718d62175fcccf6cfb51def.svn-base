package com.learnyeai.resource.service;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.learnyeai.common.support.WeyeBaseService;
import com.learnyeai.learnai.support.BaseMapper;
import com.learnyeai.resource.mapper.StdCustLearnRecordMapper;
import com.learnyeai.resource.model.StdCustLearnRecord;
import com.learnyeai.resource.model.StdCustLearnResource;
import com.learnyeai.tools.common.StringUtils;

import tk.mybatis.mapper.weekend.Weekend;
import tk.mybatis.mapper.weekend.WeekendCriteria;

/**
 *
 * @author yl
 */
@Service
public class StdCustLearnRecordWyService extends WeyeBaseService<StdCustLearnRecord> {

	@Resource
	private StdCustLearnRecordMapper stdCustLearnRecordMapper;

	@Resource
	private StdCustLearnRecordCatchService stdCustLearnRecordCatchService;

	@Resource
	private StdCustLearnResourceCatchService stdCustLearnResourceCatchService;

	@Resource
	private StdCustLearnResourceWyService stdCustLearnResourceWyService;

	@Override
	public BaseMapper<StdCustLearnRecord> getMapper() {
		return stdCustLearnRecordMapper;
	}

	@Value("${learnrecord.expiredTime}")
	private long expiredTime;

	@Override
	protected boolean isLogicDelete() {
		return false;
	}

	/**
	 * status0操作成功 1操作失败
	 * 
	 * @param cc
	 * @return
	 */
	@Transactional
	public Map<String, Object> learnSave(StdCustLearnRecord learnRecord) {
		Map<String, Object> map = new HashMap();
		// 用户资源记录key
		String key = learnRecord.getStudyUserId() + "_" + learnRecord.getCsId() + "_" + learnRecord.getCptId() + "_"
				+ learnRecord.getResId();
		// 用户资源key
		String urKey = learnRecord.getStudyUserId() + "_" + learnRecord.getResId();
		// 从缓存内查
		StdCustLearnRecord obj = stdCustLearnRecordCatchService.queryRecord(key);
		Long studyTime = learnRecord.getStudyTime() == null ? 60l : learnRecord.getStudyTime();
		Date endDate = new Date();
		if (obj == null || endDate.getTime() - obj.getEndDate().getTime() > expiredTime * 60 * 1000) {
			obj = new StdCustLearnRecord();
			obj.setStudyUserId(learnRecord.getStudyUserId());
			obj.setCsId(learnRecord.getCsId());
			obj.setCptId(learnRecord.getCptId());
			obj.setResId(learnRecord.getResId());
			obj.setStudyTime(studyTime);
			obj.setStartDate(new Date(endDate.getTime() - studyTime * 1000));
		} else {
			obj.setStudyTime(obj.getStudyTime() + studyTime);
		}
		if (learnRecord.getStudyBreakpoint() != null) {
			obj.setStudyBreakpoint(learnRecord.getStudyBreakpoint());
		}
		obj.setEndDate(endDate);
		super.save(obj);
		stdCustLearnRecordCatchService.saveRecord(key, obj);// 更新缓存
		// 更新用户资源缓存。。。
		StdCustLearnResource learnResource = stdCustLearnResourceWyService
				.queryUserResource(learnRecord.getStudyUserId(), learnRecord.getResId());
		learnResource.setStudyTime(learnResource.getStudyTime() + studyTime);
		learnResource.setUpdateDate(endDate);
		learnResource.setStudyBreakpoint(obj.getStudyBreakpoint());
		stdCustLearnResourceCatchService.saveUserResource(urKey, learnResource);
		map.put("status", 0);
		return map;
	}

	@Override
	protected Weekend<StdCustLearnRecord> genSqlExample(StdCustLearnRecord t, Map params) {
		Weekend<StdCustLearnRecord> w = super.genSqlExample(t, params);
		WeekendCriteria<StdCustLearnRecord, Object> c = w.weekendCriteria();
		if (StringUtils.isNotBlank(t.getStudyUserId())) {
			c.andEqualTo(StdCustLearnRecord::getStudyUserId, t.getStudyUserId());
		}
		if (StringUtils.isNotBlank(t.getResId())) {
			c.andEqualTo(StdCustLearnRecord::getResId, t.getResId());
		}
		if (StringUtils.isNotBlank(t.getCsId())) {
			c.andEqualTo(StdCustLearnRecord::getCsId, t.getCsId());
		}
		if (StringUtils.isNotBlank(t.getCptId())) {
			c.andEqualTo(StdCustLearnRecord::getCptId, t.getCptId());
		}
		w.and(c);
		return w;
	}
	
}
