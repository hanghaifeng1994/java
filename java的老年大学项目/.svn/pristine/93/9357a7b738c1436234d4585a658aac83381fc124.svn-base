package com.learnyeai.lucene.build;

import com.learnyeai.lucene.document.DocumentCreator;
import com.learnyeai.lucene.document.impl.CommonDocumentCreator;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * sql创建索引
 *      数据库链接信息
 *      sql语句
 *      创建doc
 *
 * Created by zhangpz on 20180906
 */
public class IndexBuilder {
    private String indexName; // 索引名称
    private String indexDirUrl;
    private String sql;
    private DBUtil dbUtil;

    private Analyzer analyzer=new SmartChineseAnalyzer();
    private DocumentCreator documentCreator = new CommonDocumentCreator(); // 创建索引

    private static Logger logger = LoggerFactory.getLogger(IndexBuilder.class);

    public void setAnalyzer(Analyzer analyzer) {
        this.analyzer = analyzer;
    }

    public void setDbUtil(DBUtil dbUtil) {
        this.dbUtil = dbUtil;
    }

    public void setDocumentCreator(DocumentCreator documentCreator) {
        this.documentCreator = documentCreator;
    }

    public void setIndexDirUrl(String indexDirUrl) {
        this.indexDirUrl = indexDirUrl;
    }

    public void setSql(String sql) {
        this.sql = sql;
    }

    public IndexBuilder(String indexName){
        this.indexName = indexName;
    }

    /**
     * 从数据库查询获取结果集
     * @return
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    public ResultSet getResultSet() throws ClassNotFoundException, SQLException {

        Connection conn=dbUtil.getConnection();
        Statement statement=conn.createStatement();
        return statement.executeQuery(sql);
    }

    /**
     * 结束工作
     */
    protected void complete(){
        if(dbUtil!=null)
            dbUtil.closeConnection();
        dbUtil=null;
    }

    /**
     * 启动建立索引
     * @throws ClassNotFoundException
     * @throws SQLException
     * @throws IOException
     */
    public boolean start(){
        return start(null);
    }
    public boolean start(IndexWriterConfig.OpenMode openMode){
        long startTime=System.currentTimeMillis();
        String msg = openMode == null || IndexWriterConfig.OpenMode.CREATE == openMode? "重建索引" : "追加索引";
        logger.info("{} {} IndexBuilder start! {}", indexName, msg, startTime);
        IndexWriter indexWriter = null;
        ResultSet rs = null;
        Directory directory = null;
        try{
            rs = getResultSet();

            IndexWriterConfig indexWriterConfig = new IndexWriterConfig(analyzer);
            indexWriterConfig.setOpenMode(openMode == null ? IndexWriterConfig.OpenMode.CREATE : openMode);
            directory= FSDirectory.open(Paths.get(indexDirUrl));

            indexWriter=new IndexWriter(directory,indexWriterConfig);
            /*if(IndexWriterConfig.OpenMode.CREATE == openMode) {
                indexWriter.deleteAll();
            }*/
            Document doc=null;
            while(rs.next()){
                doc=documentCreator.createDocument(rs);
                indexWriter.addDocument(doc);
            }

            long endTime=System.currentTimeMillis();
            logger.info("{} {}成功 complete {}s", indexName, msg, (endTime-startTime)/1000);

            return true;
        }catch (Exception e){
            logger.error(indexName + msg + "失败", e);
            return false;
        }finally {
            if(null != indexWriter) {
                try {
                    indexWriter.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if(null != rs){
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(null != directory){
                try {
                    directory.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            complete();
        }
    }


}