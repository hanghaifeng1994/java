package com.learnyeai.resource.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.google.common.collect.Maps;
import com.learnyeai.common.support.WeyeBaseService;
import com.learnyeai.core.cache.RedisUtil;
import com.learnyeai.core.cache.RedisUtilFactory;
import com.learnyeai.learnai.support.BaseMapper;
import com.learnyeai.learnai.support.MyPage;
import com.learnyeai.resource.mapper.StdCustLearnResourceMapper;
import com.learnyeai.resource.model.ResResource;
import com.learnyeai.resource.model.StdCustLearnResource;
import com.learnyeai.tools.common.StringUtils;

import tk.mybatis.mapper.weekend.Weekend;
import tk.mybatis.mapper.weekend.WeekendCriteria;

/**
 *
 * @author twang
 */
@Service
public class StdCustLearnResourceWyService extends WeyeBaseService<StdCustLearnResource> {

	@Resource
	private StdCustLearnResourceMapper stdCustLearnResourceMapper;

	@Resource
	private StdCustLearnResourceCatchService stdCustLearnResourceCatchService;

	@Resource
	private ResResourceWyService resResourceWyService;

	@Override
	public BaseMapper<StdCustLearnResource> getMapper() {
		return stdCustLearnResourceMapper;
	}

	@Override
	protected boolean isLogicDelete() {
		return false;
	}

	@Value("${learnresource.expiredTime}")
	private long expiredTime;

	/**
	 * 从缓存查询，没有新增
	 * 
	 * @param userId
	 * @param resId
	 * @return
	 */
	public StdCustLearnResource queryUserResource(String userId, String resId) {
		String key = userId + "_" + resId;
		StdCustLearnResource obj = stdCustLearnResourceCatchService.queryUserResource(key);
		if (obj == null) {
			obj = new StdCustLearnResource();
			obj.setCreateDate(new Date());
			obj.setStudyUserId(userId);
			obj.setResId(resId);
			obj.setStudyTime(0l);
			obj.setStudyNum(0l);
			obj.setStudyBreakpoint(0l);
			obj.setStudyFinished("0");
			super.save(obj);
		}
		return obj;
	}

	public Map<String, Object> saveOrUpdate(StdCustLearnResource learnResource) {
		Map<String, Object> map = new HashMap();
		for (String resId : learnResource.getResId().split(",")) {
			StdCustLearnResource obj = new StdCustLearnResource();
			obj.setStudyUserId(learnResource.getStudyUserId());
			obj.setResId(resId);
			obj = super.queryOne(obj);
			if (obj == null) {
				obj = new StdCustLearnResource();
				obj.setCreateDate(new Date());
				obj.setStudyUserId(learnResource.getStudyUserId());
				obj.setResId(resId);
				obj.setStudyTime(0l);
				obj.setStudyNum(0l);
				obj.setStudyBreakpoint(0l);
				obj.setStudyFinished("0");
				super.save(obj);
			}
		}
		map.put("status", 0);
		map.put("msg", "保存成功!");
		return map;
	}

	public MyPage<StdCustLearnResource> queryResourcePage(StdCustLearnResource learnResource) {
		if (learnResource != null && learnResource.getPage() != null && learnResource.getRows() != null) {
			PageHelper.startPage(learnResource.getPage(), learnResource.getRows());
		}
		List<StdCustLearnResource> list = stdCustLearnResourceMapper.queryResourcePage(learnResource);
		for (StdCustLearnResource obj : list) {
			ResResource resource = resResourceWyService.get(obj.getResId());
			obj.setResName(resource.getResName());
		}
		MyPage<StdCustLearnResource> page = new MyPage<StdCustLearnResource>(list);
		return page;
	}

	public List<StdCustLearnResource> queryResources(StdCustLearnResource learnResource) {
		List<StdCustLearnResource> list = new ArrayList<StdCustLearnResource>();
		String userId = learnResource.getStudyUserId();
		for (String resId : learnResource.getResId().split(",")) {
			String key = userId + "_" + resId;
			StdCustLearnResource obj = stdCustLearnResourceCatchService.queryUserResource(key);
			if(obj==null) continue;
			ResResource resource = resResourceWyService.get(obj.getResId());
			obj.setResName(resource.getResName());
			list.add(obj);
		}
		return list;
	}

	public MyPage<StdCustLearnResource> queryUserPage(StdCustLearnResource learnResource) {
		Map<String, String> params = Maps.newHashMap();
		params.put("sorts", "updateDate=0");
		MyPage<StdCustLearnResource> page = super.queryPage(learnResource, params);
		return page;
	}

	@Override
	protected Weekend<StdCustLearnResource> genSqlExample(StdCustLearnResource t, Map params) {
		Weekend<StdCustLearnResource> w = super.genSqlExample(t, params);
		WeekendCriteria<StdCustLearnResource, Object> c = w.weekendCriteria();
		if (StringUtils.isNotBlank(t.getStudyUserId())) {
			c.andEqualTo(StdCustLearnResource::getStudyUserId, t.getStudyUserId());
		}
		if (StringUtils.isNotBlank(t.getResId())) {
			c.andEqualTo(StdCustLearnResource::getResId, t.getResId());
		}
		w.and(c);
		return w;
	}

	public void synRedisToDb() {
		long time = expiredTime * 60 * 1000;// 超时时间
		int success = 0, error = 0;
		System.out.println("synRedisToDb=>开始将用户资源学习时间从缓存同步到数据库");
		RedisUtil redis = RedisUtilFactory.getUtil("resourceLearn", StdCustLearnResource.class);
		List<StdCustLearnResource> list = redis.getAll();
		for (StdCustLearnResource obj : list) {
			String key = obj.getStudyUserId() + "_" + obj.getResId();
			int result = super.updateBySelect(obj);
			if (result == 0) {
				System.out.println("synRedisToDb=>保存到数据库错误|id=" + key);
				error++;
				continue;
			}
			// 发送消息到消息队列，去统计课程总的学习时间

			// 超时不再学习，清除缓存 为了不每次都查询
			if (new Date().getTime() - obj.getUpdateDate().getTime() > time) {
				System.out.println("synRedisToDb=>超时不再学习，清除缓存|id=" + key);
				stdCustLearnResourceCatchService.removeUserResource(key);
			}
			success++;
		}
		System.out.println("synRedisToDb=>结束将用户资源学习时间从缓存同步到数据库，同步成功数量=" + success + "|失败数量=" + error);
	}
}
