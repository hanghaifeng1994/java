package com.learnyeai.activity.service;

import com.learnyeai.activity.model.ActActivityMemer;
import com.learnyeai.activity.mapper.ActActivityMemerMapper;
import com.learnyeai.learnai.support.BaseMapper;
import com.learnyeai.learnai.support.BaseService;
import com.learnyeai.learnai.support.iml.CurrentUserInfoIml;
import com.learnyeai.tools.common.MapUtil;
import com.learnyeai.tools.common.StringUtils;
import org.springframework.stereotype.Service;
import tk.mybatis.mapper.weekend.Weekend;
import tk.mybatis.mapper.weekend.WeekendCriteria;

import javax.annotation.Resource;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author yl
 */
@Service
public class ActActivityMemerWyService extends BaseService<ActActivityMemer> {

    @Resource
    private ActActivityMemerMapper actActivityMemerMapper;
    @Resource
    private CurrentUserInfoIml currentUserInfoIml;
   /* @Resource
    private Weye;*/


    @Override
    public BaseMapper<ActActivityMemer> getMapper() {
        return actActivityMemerMapper;
    }
    @Override
    protected boolean isLogicDelete(){
        return false;
    }
    @Override
    protected Weekend genSqlExample(ActActivityMemer t, Map params) {
        Weekend<ActActivityMemer> w = super.genSqlExample(t,params);
        WeekendCriteria<ActActivityMemer,Object> c=w.weekendCriteria();
        if(StringUtils.isNotBlank(t.getActId())){
            c.andEqualTo(ActActivityMemer::getActId,t.getActId());
        }
        if(StringUtils.isNotBlank(t.getJoinupUserId())){
            c.andEqualTo(ActActivityMemer::getJoinupUserId,t.getJoinupUserId());
        }
        w.and(c);
        return  w;

    }

    public Map<String,Object> saveData(ActActivityMemer am){
        String userId =currentUserInfoIml.getId();
       List<ActActivityMemer> list =super.queryList(am,new HashMap());
       if(list.size()>0){
           return MapUtil.newMap("status",1);
       }
        am.setJoinupUserId(userId);
        am.setJoinupDate(new Date());
        actActivityMemerMapper.insertSelective(am);
        return MapUtil.newMap("status",0);
    };
}
