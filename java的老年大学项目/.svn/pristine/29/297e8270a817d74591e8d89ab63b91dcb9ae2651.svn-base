package com.learnyeai.activity.task;

import com.learnyeai.activity.model.ActActivity;
import com.learnyeai.activity.model.ActActivityWorks;
import com.learnyeai.activity.service.ActActivityWorksWyService;
import com.learnyeai.activity.service.ActActivityWyService;
import com.learnyeai.mq.AuditlogMq;
import com.learnyeai.tools.common.JsonUtils;
import org.quartz.JobExecutionContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

@Component("auditListener")
public class AuditListener {
    @Value("${serviceType}")
    private String serviceType;
    @Value("${serviceType_work}")
    private String serviceTypeWork;
    @Autowired
    @Qualifier(value="redisTemplateMq")
    RedisTemplate<String,Object> redisTemplate;
    @Autowired
    private ActActivityWorksWyService actActivityWorksWyService;
    @Autowired
    ActActivityWyService actActivityWyService;
    private static final Logger logger = LoggerFactory.getLogger(AuditListener.class);
    @Transactional
    public void updateAuditStatus(JobExecutionContext context){
        //获取所有的redis中处理后的所有id
        List<Object> list=new ArrayList<>();
        list.add(serviceType);
        list.add(serviceTypeWork);
        Set<String> cachkeys=  redisTemplate.keys("*"+serviceType+"*");
        int count=0;
        int workNum=0;
        for (Object cachKey:cachkeys){
            String type =(String) cachKey;
            Set<Object> keys =redisTemplate.opsForHash().keys(type);
            Iterator<Object> iterator = keys.iterator();
            ActActivity act=new ActActivity();
            ActActivityWorks wks=new ActActivityWorks();
            while (iterator.hasNext()){
                String auditId=(String) iterator.next();
                String jstr=  (String) redisTemplate.opsForHash().get(type,auditId);
                AuditlogMq obj=JsonUtils.jsonToObject(jstr,AuditlogMq.class);
                if(serviceType.equals(type)){
                    act.setActId(obj.getObjId());
                    act.setActAuditId(auditId);
                    count+= actActivityWyService.save(act);
                }else if(serviceTypeWork.equals(type)){
                    wks.setWksId(obj.getObjId());
                    wks.setWksAuditId(auditId);
                    workNum+=   actActivityWorksWyService.save(wks);
                }
                //操作成功后删除缓存数据
                redisTemplate.opsForHash().delete(type,auditId);
            }
        }
        logger.info("更新活动{}条数据,更新活动作品{}条数据",count,workNum);
    }
}
