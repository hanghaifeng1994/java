package com.learnyeai.resource.service;

import com.learnyeai.resource.model.ResCategory;
import com.learnyeai.resource.model.ResSiteCategoryRel;
import com.learnyeai.tools.common.StringUtils;
import com.learnyeai.resource.mapper.ResCategoryMapper;
import com.learnyeai.resource.mapper.ResSiteCategoryRelMapper;
import com.github.pagehelper.PageHelper;
import com.learnyeai.learnai.support.BaseMapper;
import com.learnyeai.learnai.support.BaseService;
import com.learnyeai.learnai.support.MyPage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

/**
 *
 * @author twang
 */
@Service
public class ResCategoryWyService extends BaseService<ResCategory> {

	@Resource
	private ResCategoryMapper resCategoryMapper;

	@Autowired
	private ResSiteCategoryRelWyService resSiteCategoryRelWyService;

	@Override
	public BaseMapper<ResCategory> getMapper() {
		return resCategoryMapper;
	}

	@Override
	protected boolean isLogicDelete() {
		return true;
	}

	/**
	 * status0操作成功 1操作失败
	 * 
	 * @param rc
	 * @return
	 */
	@Transactional
	public Map<String, Object> saveOrUpdate(ResCategory rc) {
		Map<String, Object> map = new HashMap();
		String parentId = rc.getParentId();
		String parentIds;
		int catLevel = 1;
		if (StringUtils.isNotBlank(parentId)) {
			ResCategory parent = super.queryById(parentId);
			parentIds = parent.getParentIds() + parentId + ",";
			catLevel = parent.getCatLevel() + 1;
			rc.setParentIds(parentIds);
			rc.setCatLevel(catLevel);
		}

		if (StringUtils.isBlank(rc.getCatId())) {
			rc.setCreateDate(new Date());
		}
		super.save(rc);

		// 保存关系表
		ResSiteCategoryRel resSiteCategoryRel = new ResSiteCategoryRel();
		resSiteCategoryRel.setCatId(rc.getCatId());
		resSiteCategoryRel.setCatCrtSiteId(rc.getSiteId());
		resSiteCategoryRel.setSiteId(rc.getSiteId());
		resSiteCategoryRel = resSiteCategoryRelWyService.queryOne(resSiteCategoryRel);
		if (resSiteCategoryRel == null) {
			resSiteCategoryRel = new ResSiteCategoryRel();
			resSiteCategoryRel.setCatId(rc.getCatId());
			resSiteCategoryRel.setCatCrtSiteId(rc.getSiteId());
			resSiteCategoryRel.setSiteId(rc.getSiteId());
			resSiteCategoryRel.setCatSort(0);
			resSiteCategoryRel.setShowStatus(true);
		}
		if (rc.getShowStatus() != null) {
			resSiteCategoryRel.setShowStatus(rc.getShowStatus());
		}
		if (resSiteCategoryRel.getCatSort() != null) {
			resSiteCategoryRel.setCatSort(rc.getCatSort());
		}
		resSiteCategoryRelWyService.save(resSiteCategoryRel);
		map.put("status", 0);
		return map;

	}

	@Transactional
	public Map<String, Object> deleteCat(ResCategory rc) {
		Map<String, Object> result = new HashMap();
		int num = 0;
		for (String catId : rc.getCatId().split(",")) {
			ResCategory delOne = super.queryById(catId);
			if (delOne != null) {
				delOne.setDelFlag(true);
				super.save(delOne);
				ResSiteCategoryRel resSiteCategoryRel = new ResSiteCategoryRel();
				resSiteCategoryRel.setCatId(catId);
				List<ResSiteCategoryRel> rscrs = resSiteCategoryRelWyService.queryList(resSiteCategoryRel, null);
				for (ResSiteCategoryRel rscr : rscrs) {
					rscr.setShowStatus(false);
					resSiteCategoryRelWyService.save(rscr);
				}
				num++;
			}
		}
		result.put("status", "0");
		result.put("num", num);
		return result;
	}

	@Transactional
	public List<ResCategory> queryManagePage(ResCategory rc) {
		if (rc != null && rc.getPage() != null && rc.getRows() != null) {
			PageHelper.startPage(rc.getPage(), rc.getRows());
		}
		return resCategoryMapper.queryManagePage(rc);
	}

	@Transactional
	public List<ResCategory> queryShowPage(ResCategory rc) {
		if (rc != null && rc.getPage() != null && rc.getRows() != null) {
			PageHelper.startPage(rc.getPage(), rc.getRows());
		}
		return resCategoryMapper.queryShowPage(rc);

	}
}
