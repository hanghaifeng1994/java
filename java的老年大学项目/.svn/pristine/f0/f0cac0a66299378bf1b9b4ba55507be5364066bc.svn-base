package com.learnyeai.course.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.annotation.Resource;

import org.apache.commons.lang3.time.DateFormatUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.github.pagehelper.PageHelper;
import com.google.common.collect.Lists;
import com.learnyeai.common.support.WeyeBaseService;
import com.learnyeai.common.utils.WeyeCons;
import com.learnyeai.common.utils.WeyeThreadContextUtils;
import com.learnyeai.core.support.ThreadContext;
import com.learnyeai.course.mapper.CrsCourseMapper;
import com.learnyeai.course.model.CrsCatalogCourseRel;
import com.learnyeai.course.model.CrsCourse;
import com.learnyeai.course.model.CrsSiteCourseRel;
import com.learnyeai.learnai.support.BaseMapper;
import com.learnyeai.learnai.support.MyPage;
import com.learnyeai.tools.common.BeanUtils;
import com.learnyeai.tools.common.DateHelper;
import com.learnyeai.tools.common.StringUtils;

/**
 *
 * @author twang
 */
@Service
public class CrsCourseWyService extends WeyeBaseService<CrsCourse> {

	@Resource
	private CrsCourseMapper crsCourseMapper;

	@Resource
	private CrsSiteCourseRelWyService crsSiteCourseRelWyService;

	@Resource
	private CrsCatalogCourseRelWyService crsCatalogCourseRelWyService;

	@Override
	public BaseMapper<CrsCourse> getMapper() {
		return crsCourseMapper;
	}

	@Override
	protected boolean isLogicDelete() {
		return true;
	}

	/**
	 * status0操作成功 1操作失败 2:资源分类id不能为空
	 * 
	 * @param cs
	 * @return
	 */
	@Transactional
	public Map<String, Object> saveOrUpdate(CrsCourse cs) {
		Map<String, Object> map = new HashMap();
		boolean isNew = false;
		boolean isModifyCat = false;// 是否修改课程分类
		if (StringUtils.isBlank(cs.getCsId())) {
			cs.setCreateDate(new Date());
			cs.setCsPubStatus("0");
			cs.setCsStatus("0");
			isNew = true;
			if (StringUtils.isBlank(cs.getCsSerialNo())) {
				cs.setCsSerialNo(genSerialNo());
			}
		}
		if (StringUtils.isNotBlank(cs.getCsCatstr())) {
			isModifyCat = true;
		}
		super.save(cs);

		if (isModifyCat) {
			List<CrsCatalogCourseRel> list = new ArrayList<CrsCatalogCourseRel>();
			CrsCatalogCourseRel ccr = new CrsCatalogCourseRel();
			ccr.setCsId(cs.getCsId());
			list = crsCatalogCourseRelWyService.queryList4Simple(ccr);
			for (CrsCatalogCourseRel rel : list) {
				crsCatalogCourseRelWyService.delete(rel);
			}
			CrsCatalogCourseRel addObj = null;
			for (String catId : cs.getCsCatstr().split(",")) {
				addObj = new CrsCatalogCourseRel();
				addObj.setCatId(catId);
				addObj.setCsId(cs.getCsId());
				crsCatalogCourseRelWyService.save(addObj);
			}
		}
		// 保存关系表
		if (isNew) {
			CrsSiteCourseRel crsSiteCourseRel = new CrsSiteCourseRel();
			crsSiteCourseRel.setCsId(cs.getCsId());
			crsSiteCourseRel.setCsCrtSiteId(cs.getSiteId());
			crsSiteCourseRel.setSiteId(cs.getSiteId());
			crsSiteCourseRel = crsSiteCourseRelWyService.queryOne(crsSiteCourseRel);
			if (crsSiteCourseRel == null) {
				crsSiteCourseRel = new CrsSiteCourseRel();
				crsSiteCourseRel.setCsId(cs.getCsId());
				crsSiteCourseRel.setCsCrtSiteId(cs.getSiteId());
				crsSiteCourseRel.setSiteId(cs.getSiteId());
				crsSiteCourseRel.setCsAsName(cs.getCsName());
				crsSiteCourseRel.setCsPubStatus("0");
				crsSiteCourseRel.setCsManageStatus("1");
				crsSiteCourseRelWyService.save(crsSiteCourseRel);
			}
		}
		map.put("status", 0);
		map.put("msg", "保存成功!");
		return map;

	}

	@Transactional
	public Map<String, Object> deleteCourses(CrsCourse cs) {
		Map<String, Object> result = new HashMap();
		int num = 0;
		for (String csId : cs.getCsId().split(",")) {
			CrsCourse delOne = super.queryById(csId);
			if (delOne != null) {
				delOne.setDelFlag("1");
				super.save(delOne);
				num++;
			}
		}
		result.put("status", "0");
		result.put("num", num);
		return result;
	}

	@Transactional
	public Map<String, Object> publish(CrsCourse cs) {
		Map<String, Object> result = new HashMap();
		int num = 0;
		for (String csId : cs.getCsId().split(",")) {
			CrsSiteCourseRel crsSiteCourseRel = new CrsSiteCourseRel();
			crsSiteCourseRel.setCsId(csId);
			// 站点
			String siteId = WeyeThreadContextUtils.getSiteId();
			if (StringUtils.isNotBlank(siteId))
				BeanUtils.setProperty(crsSiteCourseRel, WeyeCons.BEAN_NAME_SITE_ID, siteId, true);
			crsSiteCourseRel = crsSiteCourseRelWyService.queryOne(crsSiteCourseRel);
			if (crsSiteCourseRel != null) {
				crsSiteCourseRel.setCsPubStatus(cs.getCsPubStatus());
				crsSiteCourseRel.setCsPubDate(new Date());
				crsSiteCourseRelWyService.save(crsSiteCourseRel);
				num++;
			}
		}
		result.put("status", "0");
		result.put("num", num);
		return result;
	}

	@Transactional
	public Map<String, Object> check(CrsCourse cs) {
		Map<String, Object> result = new HashMap();
		int num = 0;
		for (String csId : cs.getCsId().split(",")) {
			CrsCourse obj = super.queryById(csId);
			if (obj != null) {
				obj.setCsStatus(cs.getCsStatus());
				super.save(obj);
				num++;
			}
		}
		result.put("status", "0");
		result.put("num", num);
		return result;
	}

	@Transactional
	public Map<String, Object> submitCheck(CrsCourse cs) {
		Map<String, Object> result = new HashMap();
		int num = 0;
		for (String csId : cs.getCsId().split(",")) {
			CrsCourse obj = super.queryById(csId);
			if (obj != null) {
				obj.setCsStatus("1");
				super.save(obj);
				System.out.println("发送审核消息队列。。。");
				num++;
			}
		}
		result.put("status", "0");
		result.put("num", num);
		return result;
	}

	@Transactional
	public Map<String, Object> author(CrsCourse cs) {
		Map<String, Object> result = new HashMap();
		result.put("status", "0");
		return result;
	}

	public Object detail(String csIds) {
		List<CrsCourse> list = Lists.newArrayList();
		for (String csId : csIds.split(",")) {
			CrsCourse crsCourse = super.queryById(csId);
			if (crsCourse == null)
				continue;
			list.add(crsCourse);
		}
		return list;
	}

	@Transactional
	public MyPage<CrsCourse> queryManagePage(CrsCourse cs) {
		if (cs != null && cs.getPage() != null && cs.getRows() != null) {
			PageHelper.startPage(cs.getPage(), cs.getRows());
		}
		// 站点
		String siteId = WeyeThreadContextUtils.getSiteId();
		if (StringUtils.isNotBlank(siteId))
			BeanUtils.setProperty(cs, WeyeCons.BEAN_NAME_SITE_ID, siteId, true);
		List<CrsCourse> list = crsCourseMapper.queryManagePage(cs);
		MyPage<CrsCourse> page = new MyPage<CrsCourse>(list);
		return page;
	}

	@Transactional
	public MyPage<CrsCourse> queryShowPage(CrsCourse cs) {
		if (cs != null && cs.getPage() != null && cs.getRows() != null) {
			PageHelper.startPage(cs.getPage(), cs.getRows());
		}
		// 站点
		String siteId = WeyeThreadContextUtils.getSiteId();
		if (StringUtils.isNotBlank(siteId))
			BeanUtils.setProperty(cs, WeyeCons.BEAN_NAME_SITE_ID, siteId, true);
		List<CrsCourse> list = crsCourseMapper.queryShowPage(cs);
		MyPage<CrsCourse> page = new MyPage<CrsCourse>(list);
		return page;

	}

	@Transactional
	public MyPage<CrsCourse> queryMainPage(CrsCourse cs) {
		if (cs != null && cs.getPage() != null && cs.getRows() != null) {
			PageHelper.startPage(cs.getPage(), cs.getRows());
		}
		// 站点
		String siteId = WeyeThreadContextUtils.getSiteId();
		if (StringUtils.isNotBlank(siteId))
			BeanUtils.setProperty(cs, WeyeCons.BEAN_NAME_SITE_ID, siteId, true);
		List<CrsCourse> list = crsCourseMapper.queryMainPage(cs);
		MyPage<CrsCourse> page = new MyPage<CrsCourse>(list);
		return page;

	}

	private synchronized String genSerialNo() {
		String serialNo = DateFormatUtils.format(new Date(), "yyyyMMddHHmmss" + new Random().nextInt(1000000));
		return serialNo;
	}

}
